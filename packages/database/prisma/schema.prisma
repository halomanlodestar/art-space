// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./output"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  COMMUNITY_CREATOR
  COMMUNITY_ADMIN
  SUDO
}

enum MediaType {
  AUDIO
  IMAGE
  VIDEO
}

enum CredentialProvider {
  EMAIL
  GOOGLE
}

model User {
  id                 String             @id @default(cuid())
  username           String             @unique
  email              String             @unique
  image              String?
  password           String
  name               String
  provider           CredentialProvider @default(EMAIL)
  role               Role               @default(USER)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  posts              Post[]
  likes              Like[]
  comments           Comment[]
  createdCommunities Community[]        @relation("createdCommunities")
  follows            CommunityFollow[]
  userBadges         UserBadges[]
  portfolioId        String?            @unique
  portfolio          Portfolio?         @relation(fields: [portfolioId], references: [id])
  eventsWon          Event[]
  communityMember    CommunityMember[]
}

model CommunityMember {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  communityId String
  community   Community @relation(fields: [communityId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, communityId])
}

model Community {
  id               String            @id @default(cuid())
  createdById      String
  createdBy        User              @relation(fields: [createdById], references: [id], map: "createdCommunities", name: "createdCommunities")
  name             String            @unique
  slug             String            @unique
  description      String
  image            String?
  banner           String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  posts            Post[]
  followers        CommunityFollow[]
  events           Event[]
  communityMembers CommunityMember[]
}

model Media {
  id        String    @id @default(cuid())
  url       String
  type      MediaType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  postId    String
  post      Post      @relation(fields: [postId], references: [id])
}

model Post {
  id          String       @id @default(cuid())
  title       String
  slug        String       @unique
  description String
  media       Media[]
  authorId    String
  author      User         @relation(fields: [authorId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  communityId String
  community   Community    @relation(fields: [communityId], references: [id])
  likes       Like[]
  comments    Comment[]
  postBadges  PostBadges[]
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  authorId  String
  author    User      @relation(fields: [authorId], references: [id])
  postId    String
  post      Post      @relation(fields: [postId], references: [id])
  parentId  String?
  parent    Comment?  @relation(fields: [parentId], references: [id], name: "CommentToComment")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes     Like[]
  comments  Comment[] @relation("CommentToComment")
}

model CommunityFollow {
  id          String    @id @default(cuid())
  communityId String
  community   Community @relation(fields: [communityId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([communityId, userId])
}

model Badge {
  id          String       @id @default(cuid())
  name        String
  description String
  slug        String       @unique
  type        String
  price       Float
  image       String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  postBadges  PostBadges[]
  userBadges  UserBadges[]
}

model PostBadges {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  badgeId   String
  badge     Badge    @relation(fields: [badgeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, badgeId])
}

model UserBadges {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  badgeId   String
  badge     Badge    @relation(fields: [badgeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, badgeId])
}

model Portfolio {
  id        String   @id @default(cuid())
  userId    String
  bio       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?
}

model Event {
  id          String    @id @default(cuid())
  name        String
  description String
  image       String
  winnerId    String?
  winner      User?     @relation(fields: [winnerId], references: [id])
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  communityId String
  community   Community @relation(fields: [communityId], references: [id])
}
